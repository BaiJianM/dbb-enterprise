version: '3'
services:

  # Nginx服务
  nginx:
    image: nginx:1.21.5
    container_name: nginx
    restart: always
    # 端口号绑定（宿主机:容器内）
    ports:
      - '8080:8080'
      - '51007:51007'
      - '51008:51008'
      - '51009:51009'
    environment:
      TZ: "Asia/Shanghai"
    # 目录映射（宿主机:容器内）
    volumes:
      # 配置文件
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      # 多项目配置文件
      - ./nginx/conf/conf.d:/etc/nginx/conf.d
      # 日志
      - ./nginx/log:/var/log/nginx
      # 项目目录
      - ./nginx/html:/html
      # 静态文件目录（项目文件、图片、流媒体等）
      - /home/data/apps:/apps
      # 容器服务文件
      - /opt/docker:/dockerfiles

  # Redis服务
  redis:
    image: redis:6.2.7
    restart: always
    hostname: redis
    container_name: redis
    privileged: true
    ports:
      - 6379:6379
    environment:
      TZ: "Asia/Shanghai"
    volumes:
      - ./redis/data:/data
      - ./redis/conf/redis.conf:/etc/redis/redis.conf
      - ./redis/logs:/logs
    command: ["redis-server","/etc/redis/redis.conf"]

  # Nacos服务
  nacos:
    image: nacos/nacos-server:1.4.2
    restart: always
    container_name: nacos
    environment:
      TZ: "Asia/Shanghai"
      # 支持主机名可以使用hostname,否则使用ip，默认ip
      PREFER_HOST_MODE: "ip"
      # 单机模式
      MODE: "standalone"
    volumes:
      - ./nacos/logs:/home/nacos/logs
      - ./nacos/conf:/home/nacos/conf
    ports:
      - 8848:8848

  # RabbitMQ服务
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      # web控制台
      - 15672:15672
      # 服务端口
      - 5672:5672
    restart: always
    volumes:
      # 数据文件路径
      - ./rabbitmq/data:/var/lib/rabbitmq
    environment:
      TZ: "Asia/Shanghai"
      RABBITMQ_DEFAULT_VHOST: "/"
      # 用户名
      RABBITMQ_DEFAULT_USER: "admin"
      # 密码
      RABBITMQ_DEFAULT_PASS: "hldb3x#@lPL4ppvw"

  # ----- RocketMQ服务(起)
  # NameServer服务
  rocketmq_namesrv:
    image: apache/rocketmq:4.9.2
    container_name: rocketmq_namesrv
    ports:
      - 9876:9876
    environment:
      TZ: "Asia/Shanghai"
    volumes:
      - ./rocketmq/namesrv/logs:/home/rocketmq/logs
      - /etc/localtime:/etc/localtime
      - /etc/timezone:/etc/timezone
    command: sh mqnamesrv

  # Broker节点1服务
  rocketmq_broker:
    image: apache/rocketmq:4.9.2
    container_name: rocketmq_broker
    ports:
      - 10909:10909
      - 10911:10911
      - 10912:10912
    links:
      - rocketmq_namesrv
    volumes:
      - /etc/localtime:/etc/localtime
      - /etc/timezone:/etc/timezone
      - ./rocketmq/broker1/logs:/home/rocketmq/logs
      - ./rocketmq/broker1/conf/broker.conf:/home/rocketmq/rocketmq-4.9.2/conf/broker.conf
    environment:
      TZ: "Asia/Shanghai"
      NAMESRV_ADDR: "rocketmq_namesrv:9876"
      JAVA_OPTS: " -Duser.home=/opt"
      JAVA_OPT_EXT: "-server -Xms128m -Xmx128m -Xmn128m"
    command: sh mqbroker -n rocketmq_namesrv:9876 -c ../conf/broker.conf
    depends_on:
      - rocketmq_namesrv

  # RocketMQ可视化服务
  rocketmq_dashboard:
    image: apacherocketmq/rocketmq-dashboard:latest
    container_name: rocketmq_dashboard
    ports:
      - 8868:8080
    environment:
      TZ: "Asia/Shanghai"
      JAVA_OPTS: "-Xms128m -Xmx128m -Xmn128m -Drocketmq.namesrv.addr=rocketmq_namesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false"
    depends_on:
      - rocketmq_namesrv
  # ----- RocketMQ服务(止)

  # ----- Kafka服务(起)
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    container_name: zookeeper
    ports:
      - 2181:2181
    environment:
      TZ: "Asia/Shanghai"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_JMX_PORT: 39999
  kafka:
    image: confluentinc/cp-kafka:6.1.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      TZ: "Asia/Shanghai"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 49999
  kafka-eagle:
    image: nickzurich/efak:3.0.1
    container_name: kafka-eagle
    volumes: # 挂载目录
      - ./kafka-eagle/system-config.properties:/opt/efak/conf/system-config.properties
    environment: # 配置参数
      TZ: "Asia/Shanghai"
      EFAK_CLUSTER_ZK_LIST: "zookeeper:2181"
    depends_on:
      - kafka
    ports:
      - 8048:8048
  # ----- Kafka服务(止)
  
  #MongoDB服务
  mongodb:
    image: mongo:4.0.28
    container_name: mongodb
    restart: always
    environment:
      TZ: "Asia/Shanghai"
      MONGO_DATA_DIR: "/data/db"
      MONGO_LOG_DIR: "/data/logs"
      MONGO_INITDB_ROOT_USERNAME: "admin"
      MONGO_INITDB_ROOT_PASSWORD: "123456"
    volumes:
        - ./mongodb/data:/data/db
        - ./mongodb/logs:/data/logs
    ports:
        - 27017:27017

  # 分布式事务中心服务
  seata-server:
    image: seataio/seata-server:1.4.2
    container_name: seata-server
    hostname: seata-server
    ports:
      - "8091:8091"
    environment:
      TZ: "Asia/Shanghai"
      # 指定seata服务启动端口
      SEATA_PORT: "8091"
      # 注册到nacos上的ip。客户端将通过该ip访问seata服务。
      # 注意公网ip和内网ip的差异。
      SEATA_IP: "172.17.0.1"
      SEATA_CONFIG_NAME: "file:/root/seata-config/conf/registry"
    depends_on:
      - nacos
    volumes:
    # 因为registry.conf中是nacos配置中心，只需要把registry.conf放到./seata-server/conf文件夹中
      - ./seata-server/conf:/root/seata-config/conf

  # sentinel-dashboard服务
  sentinel-dashboard:
    container_name: sentinel-dashboard
    restart: always
    environment:
      TZ: "Asia/Shanghai"
    build:
      context: ./sentinel-dashboard
      dockerfile: Dockerfile
    ports:
      - "8858:8858"

  # ----- skywalking链路追踪服务(起)
  skywalking-oap:
    image: apache/skywalking-oap-server:9.3.0
    container_name: skywalking-oap
    ports:
      - "11800:11800"
      - "12800:12800"
    healthcheck:
      test: [ "CMD-SHELL", "/skywalking/bin/swctl ch" ]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
    # 存放拦截代理的jar包，用于需要进行链路追踪的服务进行启动参数配置
      - ./skywalking/package:/skywalking/package
    environment:
      TZ: "Asia/Shanghai"
      SW_HEALTH_CHECKER: "default"
      JAVA_OPTS: "-Xms512m -Xmx512m"

  skywalking-ui:
    image: apache/skywalking-ui:9.3.0
    container_name: skywalking-ui
    depends_on:
      - skywalking-oap
    links:
      - skywalking-oap
    ports:
      - "8878:8080"
    environment:
      TZ: "Asia/Shanghai"
      SW_OAP_ADDRESS: "http://skywalking-oap:12800"
  # ----- skywalking链路追踪服务(止)

  # xxl-job分布式定时任务调度中心可视化管理端（开发环境）
  xxl-job-admin-dev:
    container_name: xxl-job-admin-dev
    build:
      context: ./xxl-job-admin-dev
      dockerfile: Dockerfile
    ports:
      - "7770:8080"

  # mysql8
  mysql8:
    image: mysql:8.0
    container_name: mysql8
    restart: always
    ports:
      - 33307:3306
    environment:
      TZ: "Asia/Shanghai"
      MYSQL_ROOT_PASSWORD: "^tPT4DwgTX9cKyOm"
    volumes:
      - ./mysql8/data:/var/lib/mysql
      - ./mysql8/conf/my.cnf:/etc/my.cnf

  # gientech框架测试服务组
  # 网关服务
  gientech_gateway:
    container_name: gientech_gateway
    restart: always
    build:
      context: ./gientech-server/gateway
      dockerfile: Dockerfile
    ports:
      - "7771:7771"
    depends_on:
      - nacos
      - redis

  # 用户中心服务
  gientech_user:
    container_name: gientech_user
    restart: always
    build:
      context: ./gientech-server/user
      dockerfile: Dockerfile
    ports:
      - "7772:7772"
    depends_on:
      - nacos
      - redis

  # 测试服务
  gientech_demo:
    container_name: gientech_demo
    restart: always
    build:
      context: ./gientech-server/demo
      dockerfile: Dockerfile
    ports:
      - "7773:7773"
    depends_on:
      - nacos
      - redis
