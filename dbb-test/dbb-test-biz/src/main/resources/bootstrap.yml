spring:
  application:
    name: dbb-test
  servlet:
    multipart:
      max-request-size: 10GB
      max-file-size: 10GB
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  cloud:
    nacos:
      config:
        file-extension: yml
        server-addr: 10.211.55.7:8848
        group: DBB
        namespace: 8e1e0593-47ec-4bda-917f-89c6aef05457
      discovery:
        server-addr: 10.211.55.7:8848
        group: DBB
        namespace: 8e1e0593-47ec-4bda-917f-89c6aef05457

    # spring cloud stream(scs)消息队列配置(rocketmq)
    # spring-cloud-stream的消息通道前缀、消息监听函数的bean名称
    function:
      definition: dbb
    stream:
      default-binder: rocketmq
      # stream与rocketmq的集成配置
      rocketmq:
        binder:
          name-server: 10.211.55.7:9876
          # 是否为Producer和Consumer开启消息轨迹功能
          enable-msg-trace: false
        # rocketmq的特性配置
        bindings:
          # 消息输入通道(接收)
          dbb-in-0:
            # 消费者配置
            consumer:
              subscription: tag2
              # push 模式
              push:
                # 是否同步消费消息模式
                orderly: false
                # 异步消费消息模式下消费失败重试策略(-1,不重试，直接放入死信队列;0,broker 控制重试策略;>0,client 控制重试策略)
                delayLevel-when-next-consume: -1
          # 消息输出通道(发送)
          dbb-out-0:
            # 生产者配置
            producer:
              # 生产者组
              group: producerGroup
              # 消息发送类型（Sync,同步;Async,异步;OneWay,单向）
              send-type: Sync
              # 是否在vip通道上发送消息
              vip-channel-enabled: false
              # 发送消息的超时时间(毫秒)
              send-msg-timeout: 3000
      # 通用集成配置
      bindings:
        # 通用消息输入通道(需与binder中的输入通道名保持一致)
        dbb-in-0:
          # rabbitmq中的exchange，kafka、rocketmq中的topic
          destination: test-topic
          # 消息类型
          content-type: application/json
          # 消费者组
          group: test-group
        # 通用消息输出通道(需与binder中的输出通道名保持一致)
        dbb-out-0:
          destination: test-topic
          content-type: application/json
